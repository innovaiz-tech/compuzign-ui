import { motion, useScroll, useTransform, useSpring } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { 
  HiShieldCheck, 
  HiClock,
  HiLockClosed,
  HiCheckCircle,
  HiLightningBolt,
  HiGlobe,
  HiArrowRight,
  HiSparkles,
  HiPhone,
  HiKey,
  HiEye,
  HiUserGroup,
  HiCog,
  HiServer,
  HiCode,
  HiChartBar,
  HiClipboardCheck,
  HiRefresh,
  HiDocumentReport,
  HiSearch,
  HiExclamation,
  HiFingerPrint,
  HiDatabase
} from 'react-icons/hi';
import Button from '../components/common/button';
import useWindowSize from '../hooks/useWindowSize';
import AnimatedStat from '../components/ui/AnimatedStat';
import CSSFlipCard from '../components/ui/CSSFlipCard';
import { 
  statsData, 
  pentestServices, 
  technicalCapabilities, 
  riskLevels, 
  pentestIncludes, 
  remediationServices, 
  testingStandards, 
  benefitsData, 
  ctaData 
} from '../data/vulnerabilityAssessmentData';

/**
 * VulnerabilityAssessment Component - Penetration Testing & Remediation
 * Focus on VAR services, testing methodologies, and remediation processes
 */
export default function VulnerabilityAssessment() {
  const [isMobile, setIsMobile] = useState(false);
  const [isTablet, setIsTablet] = useState(false);
  const { width } = useWindowSize();

  useEffect(() => {
    const checkDevice = () => {
      setIsMobile(width <= 768);
      setIsTablet(width > 768 && width <= 1024);
    };
    checkDevice();
  }, [width]);

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // Simple animation props
  const fadeInUp = {
    initial: { opacity: 0, y: 30 },
    whileInView: { opacity: 1, y: 0 },
    viewport: { once: true, margin: "-50px" },
    transition: { duration: 0.6 }
  };

  const fadeIn = {
    initial: { opacity: 0 },
    whileInView: { opacity: 1 },
    viewport: { once: true, margin: "-50px" },
    transition: { duration: 0.6 }
  };

  const staggerChildren = {
    initial: { opacity: 0 },
    whileInView: { opacity: 1 },
    viewport: { once: true, margin: "-50px" },
    transition: { 
      duration: 0.6,
      staggerChildren: 0.1
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white">
      
      {/* Hero Section */}
      <section className="relative pt-24 pb-20 lg:pt-32 lg:pb-28 overflow-hidden">
        {/* Enhanced Background Elements */}
        <div className="absolute inset-0">
          <div className="absolute inset-0 bg-gradient-to-br from-primary-bgYellow/5 via-transparent to-red-500/5"></div>
          <div className="absolute top-0 left-0 w-1/3 h-1/3 bg-gradient-to-br from-primary-bgYellow/10 to-transparent rounded-full blur-3xl"></div>
          <div className="absolute bottom-0 right-0 w-1/4 h-1/4 bg-gradient-to-tl from-red-500/10 to-transparent rounded-full blur-3xl"></div>
        </div>
        
        <div className="container mx-auto px-6 lg:px-8 max-w-7xl relative z-10">
          <div className="grid grid-cols-1 lg:grid-cols-12 gap-12 lg:gap-20 items-center">
            
            {/* Left Content - 7 columns */}
            <div className="lg:col-span-7">
              <motion.div className="space-y-10" {...fadeInUp}>
                
                {/* Enhanced Badge */}
                <motion.div 
                  className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-primary-bgYellow/15 to-primary-bgYellow/10 border border-primary-bgYellow/30 rounded-full backdrop-blur-sm"
                  whileHover={{ scale: 1.05 }}
                  transition={{ duration: 0.2 }}
                >
                  <HiShieldCheck className="w-5 h-5 text-primary-bgYellow mr-3" />
                  <span className="text-sm font-semibold text-primary-bgYellow uppercase tracking-wider">
                    Vulnerability Assessment & Remediation
                  </span>
                </motion.div>

                {/* Enhanced Main Heading */}
                <div className="space-y-6">
                  <motion.h1 
                    className="text-4xl lg:text-6xl xl:text-7xl font-bold leading-[0.9] tracking-tight"
                    initial={{ opacity: 0, y: 30 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.8, delay: 0.2 }}
                  >
                    <span className="block text-white mb-2">Advanced</span>
                    <span className="block text-primary-bgYellow mb-2 relative">
                      Penetration
                      <motion.div
                        className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-primary-bgYellow/60 to-transparent rounded-full"
                        initial={{ scaleX: 0, originX: 0 }}
                        whileInView={{ scaleX: 1 }}
                        viewport={{ once: true }}
                        transition={{ duration: 1, delay: 0.8 }}
                      />
                    </span>
                    <span className="block text-white">Testing</span>
                  </motion.h1>
                </div>

                {/* Subheading */}
                <motion.p 
                  className="text-xl lg:text-2xl text-gray-300 leading-relaxed max-w-2xl"
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.6, delay: 0.5 }}
                >
                  Comprehensive penetration testing using <span className="text-primary-bgYellow font-semibold">OWASP, SANS, and CREST standards</span> with complete remediation support.
                </motion.p>

                {/* Testing Standards */}
                <motion.div 
                  className="flex flex-wrap gap-4"
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.6, delay: 0.7 }}
                >
                  {testingStandards.map((standard, index) => (
                    <motion.div
                      key={index}
                      className="flex items-center px-4 py-2 bg-gray-800/50 border border-gray-700/50 rounded-lg backdrop-blur-sm"
                      whileHover={{ scale: 1.05, borderColor: '#ffda17' }}
                      transition={{ duration: 0.2 }}
                    >
                      <span className="text-primary-bgYellow font-bold text-sm">{standard.name}</span>
                    </motion.div>
                  ))}
                </motion.div>

                {/* CTA Button */}
                <motion.div 
                  className="pt-6"
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.6, delay: 0.9 }}
                >
                  <Button 
                    variant="primary" 
                    size="lg"
                    className="group"
                  >
                    {ctaData.buttonText}
                    <HiArrowRight className="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform duration-200" />
                  </Button>
                </motion.div>
                
              </motion.div>
            </div>

            {/* Enhanced Right Visual - 5 columns */}
            <div className="lg:col-span-5">
              <motion.div 
                className="relative overflow-hidden hero-right-visual"
                initial={{ opacity: 0, scale: 0.9 }}
                whileInView={{ opacity: 1, scale: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.8, delay: 0.3 }}
              >
                
                {/* Enhanced Central Hub */}
                <div className={`relative mx-auto flex items-center justify-center hero-central-hub ${
                  isMobile ? 'w-72 h-72' : isTablet ? 'w-80 h-80' : 'w-96 h-96'
                }`}>
                  
                  {/* Outer Ring */}
                  {!isMobile && (
                    <motion.div
                      className={`absolute rounded-full border-2 border-primary-bgYellow/20 ${
                        isTablet ? 'w-72 h-72' : 'w-80 h-80'
                      }`}
                      animate={{ 
                        rotate: [0, 360]
                      }}
                      transition={{ 
                        duration: 20, 
                        repeat: Infinity,
                        ease: "linear"
                      }}
                    />
                  )}

                  {/* Middle Ring */}
                  {!isMobile && (
                    <motion.div
                      className={`absolute rounded-full border border-red-400/20 ${
                        isTablet ? 'w-56 h-56' : 'w-64 h-64'
                      }`}
                      animate={{ 
                        rotate: [360, 0]
                      }}
                      transition={{ 
                        duration: 15, 
                        repeat: Infinity,
                        ease: "linear"
                      }}
                    />
                  )}

                  {/* Central Shield */}
                  <motion.div
                    className={`relative bg-gradient-to-br from-primary-bgYellow/25 via-primary-bgYellow/15 to-transparent rounded-full flex items-center justify-center border-4 border-primary-bgYellow/50 backdrop-blur-sm shadow-2xl ${
                      isMobile ? 'w-32 h-32' : isTablet ? 'w-36 h-36' : 'w-40 h-40'
                    }`}
                    animate={ !isMobile ? { 
                      scale: [1, 1.08, 1],
                      boxShadow: [
                        "0 0 20px rgba(255, 218, 23, 0.3)",
                        "0 0 40px rgba(255, 218, 23, 0.5)",
                        "0 0 20px rgba(255, 218, 23, 0.3)"
                      ]
                    } : {}}
                    transition={ !isMobile ? { 
                      duration: 3, 
                      repeat: Infinity,
                      ease: "easeInOut"
                    } : {}}
                  >
                    <HiSearch className={`text-primary-bgYellow drop-shadow-lg ${
                      isMobile ? 'w-16 h-16' : isTablet ? 'w-20 h-20' : 'w-20 h-20'
                    }`} />
                  </motion.div>

                  {/* Enhanced Floating Security Elements */}
                  {!isMobile && [
                    { icon: HiLightningBolt, top: '8%', left: '18%', delay: 0, label: 'Pentest' },
                    { icon: HiEye, top: '15%', right: '12%', delay: 0.5, label: 'Scan' },
                    { icon: HiClipboardCheck, bottom: '15%', right: '18%', delay: 1, label: 'Report' },
                    { icon: HiRefresh, bottom: '8%', left: '12%', delay: 1.5, label: 'Remediate' },
                  ].map((item, index) => (
                    <motion.div
                      key={index}
                      className={`absolute bg-gradient-to-br from-gray-800/90 to-gray-900/90 rounded-xl flex items-center justify-center backdrop-blur-sm border border-primary-bgYellow/20 shadow-lg group ${
                        isTablet ? 'w-12 h-12' : 'w-16 h-16'
                      }`}
                      style={{ [item.top ? 'top' : 'bottom']: item.top || item.bottom, [item.left ? 'left' : 'right']: item.left || item.right }}
                      initial={{ opacity: 0, scale: 0.5 }}
                      animate={{ 
                        opacity: 1, 
                        scale: 1,
                        y: [0, -10, 0]
                      }}
                      transition={{ 
                        opacity: { delay: 1 + item.delay, duration: 0.5 },
                        scale: { delay: 1 + item.delay, duration: 0.5 },
                        y: { 
                          delay: 2 + item.delay, 
                          duration: 2 + index * 0.3, 
                          repeat: Infinity,
                          ease: "easeInOut"
                        }
                      }}
                      whileHover={{ scale: 1.1, borderColor: '#ffda17' }}
                    >
                      <item.icon className={`text-primary-bgYellow ${
                        isTablet ? 'w-6 h-6' : 'w-8 h-8'
                      }`} />
                      <div className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                        {item.label}
                      </div>
                    </motion.div>
                  ))}

                  {/* Scanning Animation Lines */}
                  {!isMobile && [...Array(isTablet ? 4 : 6)].map((_, i) => (
                    <motion.div
                      key={`scan-line-${i}`}
                      className="absolute h-px bg-gradient-to-r from-transparent via-primary-bgYellow/40 to-transparent"
                      style={{
                        width: isTablet ? '70px' : '90px',
                        top: `${30 + i * 8}%`,
                        left: '50%',
                        transform: 'translateX(-50%)',
                      }}
                      animate={{
                        opacity: [0, 1, 0],
                        scaleX: [0, 1, 0],
                      }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        delay: i * 0.3,
                        ease: "easeInOut"
                      }}
                    />
                  ))}
                </div>
              </motion.div>
            </div>
          </div>
        </div>
      </section>

      {/* Penetration Testing Services Section */}
      <section className="py-20 lg:py-28 relative overflow-hidden">
        <div className="container mx-auto px-6 lg:px-8 max-w-7xl">
          
          {/* Section Header */}
          <motion.div className="text-center mb-16" {...fadeInUp}>
            <motion.h2 
              className="text-4xl lg:text-5xl font-bold mb-6"
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
            >
              <span className="text-white">Penetration Testing</span>
              <br />
              <span className="text-primary-bgYellow">Services</span>
            </motion.h2>
          </motion.div>

          {/* Penetration Testing Services Cards */}
          <motion.div 
            className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-20"
            variants={staggerChildren}
            initial="initial"
            whileInView="whileInView"
            viewport={{ once: true }}
          >
            {pentestServices.map((service, index) => (
              <CSSFlipCard
                key={index}
                title={service.title}
                description={service.description}
                icon={service.icon}
                index={index}
              />
            ))}
          </motion.div>

          {/* Technical Capabilities Grid */}
          <motion.div 
            className="bg-gradient-to-br from-gray-800/50 to-gray-900/50 rounded-3xl p-8 lg:p-12 backdrop-blur-sm border border-gray-700/50"
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
          >
            <motion.h3 
              className="text-3xl lg:text-4xl font-bold text-center mb-12 text-primary-bgYellow"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
            >
              Technical Testing Capabilities
            </motion.h3>
            
            <motion.div 
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
              variants={staggerChildren}
              initial="initial"
              whileInView="whileInView"
              viewport={{ once: true }}
            >
              {technicalCapabilities.map((capability, index) => (
                <motion.div
                  key={index}
                  className="flex items-center p-4 bg-gray-900/50 rounded-xl border border-gray-700/30 hover:border-primary-bgYellow/50 transition-all duration-300 group"
                  variants={{
                    initial: { opacity: 0, x: -20 },
                    whileInView: { opacity: 1, x: 0 }
                  }}
                  whileHover={{ scale: 1.02 }}
                >
                  <div className="w-12 h-12 bg-gradient-to-br from-primary-bgYellow/20 to-primary-bgYellow/10 rounded-lg flex items-center justify-center mr-4 group-hover:from-primary-bgYellow/30 group-hover:to-primary-bgYellow/20 transition-all duration-300">
                    <capability.icon className="w-6 h-6 text-primary-bgYellow" />
                  </div>
                  <span className="text-gray-200 font-medium">{capability.text}</span>
                </motion.div>
              ))}
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Risk Prioritization Section */}
      <section className="py-20 lg:py-28 relative overflow-hidden">
        <div className="container mx-auto px-6 lg:px-8 max-w-7xl">
          
          {/* Section Header */}
          <motion.div className="text-center mb-16" {...fadeInUp}>
            <motion.h2 
              className="text-4xl lg:text-5xl font-bold mb-6"
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
            >
              <span className="text-white">Risk Based Prioritization</span>
              <br />
              <span className="text-primary-bgYellow">(CVSS)</span>
            </motion.h2>
          </motion.div>

          {/* Risk Levels */}
          <motion.div 
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-20"
            variants={staggerChildren}
            initial="initial"
            whileInView="whileInView"
            viewport={{ once: true }}
          >
            {riskLevels.map((risk, index) => (
              <motion.div
                key={index}
                className={`bg-gradient-to-br ${risk.color} rounded-2xl p-6 text-white shadow-2xl border border-white/10`}
                variants={{
                  initial: { opacity: 0, y: 30 },
                  whileInView: { opacity: 1, y: 0 }
                }}
                whileHover={{ scale: 1.05, y: -5 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-bold">{risk.level}</h3>
                  <risk.icon className="w-8 h-8" />
                </div>
                <p className="text-sm opacity-90 mb-3">{risk.description}</p>
                <div className="text-xs bg-white/20 rounded-lg px-3 py-1 inline-block">
                  CVSS: {risk.cvss}
                </div>
              </motion.div>
            ))}
          </motion.div>

          {/* Penetration Test Includes */}
          <motion.div 
            className="grid grid-cols-1 lg:grid-cols-3 gap-8"
            variants={staggerChildren}
            initial="initial"
            whileInView="whileInView"
            viewport={{ once: true }}
          >
            {pentestIncludes.map((include, index) => (
              <motion.div
                key={index}
                className="bg-gradient-to-br from-gray-800/70 to-gray-900/70 rounded-2xl p-8 backdrop-blur-sm border border-gray-700/50 hover:border-primary-bgYellow/50 transition-all duration-300 group"
                variants={{
                  initial: { opacity: 0, y: 30 },
                  whileInView: { opacity: 1, y: 0 }
                }}
                whileHover={{ scale: 1.02, y: -5 }}
              >
                <div className="w-16 h-16 bg-gradient-to-br from-primary-bgYellow/20 to-primary-bgYellow/10 rounded-xl flex items-center justify-center mb-6 group-hover:from-primary-bgYellow/30 group-hover:to-primary-bgYellow/20 transition-all duration-300">
                  <include.icon className="w-8 h-8 text-primary-bgYellow" />
                </div>
                <h3 className="text-xl font-bold text-white mb-4">{include.title}</h3>
                <p className="text-gray-300 leading-relaxed">{include.description}</p>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* Vulnerabilities Remediation Section */}
      <section className="py-20 lg:py-28 bg-gradient-to-br from-gray-900/50 to-black/50 relative overflow-hidden">
        <div className="container mx-auto px-6 lg:px-8 max-w-7xl">
          
          {/* Section Header */}
          <motion.div className="text-center mb-16" {...fadeInUp}>
            <motion.h2 
              className="text-4xl lg:text-5xl font-bold mb-6"
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
            >
              <span className="text-white">Vulnerabilities</span>
              <br />
              <span className="text-primary-bgYellow">Remediation</span>
            </motion.h2>
            <motion.p 
              className="text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              CompuZign will manage remediation to include comprehensive support and certification
            </motion.p>
          </motion.div>

          {/* Remediation Services */}
          <motion.div 
            className="grid grid-cols-1 lg:grid-cols-2 gap-8"
            variants={staggerChildren}
            initial="initial"
            whileInView="whileInView"
            viewport={{ once: true }}
          >
            {remediationServices.map((service, index) => (
              <motion.div
                key={index}
                className="bg-gradient-to-br from-gray-800/70 to-gray-900/70 rounded-2xl p-8 backdrop-blur-sm border border-gray-700/50 hover:border-primary-bgYellow/50 transition-all duration-300 group"
                variants={{
                  initial: { opacity: 0, y: 30 },
                  whileInView: { opacity: 1, y: 0 }
                }}
                whileHover={{ scale: 1.02 }}
              >
                <div className="flex items-start mb-6">
                  <div className="w-16 h-16 bg-gradient-to-br from-primary-bgYellow/20 to-primary-bgYellow/10 rounded-xl flex items-center justify-center mr-4 group-hover:from-primary-bgYellow/30 group-hover:to-primary-bgYellow/20 transition-all duration-300">
                    <service.icon className="w-8 h-8 text-primary-bgYellow" />
                  </div>
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-white mb-3">{service.title}</h3>
                    <p className="text-gray-300 leading-relaxed">{service.description}</p>
                  </div>
                </div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>
      
      {/* Call to Action Section */}
      <section className="py-20 lg:py-28 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-br from-primary-bgYellow/5 via-transparent to-red-500/5"></div>
        
        <div className="container mx-auto px-6 lg:px-8 max-w-4xl relative z-10">
          <motion.div 
            className="text-center space-y-10"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.8 }}
          >
            <motion.h2 
              className="text-4xl lg:text-5xl font-bold text-white leading-tight"
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
            >
              {ctaData.title}
            </motion.h2>
            
            <motion.p 
              className="text-xl text-gray-300 leading-relaxed max-w-3xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              {ctaData.description}
            </motion.p>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: 0.6 }}
            >
              <Button 
                variant="primary" 
                size="xl"
                className="group"
              >
                {ctaData.buttonText}
                <HiArrowRight className="ml-3 w-6 h-6 group-hover:translate-x-1 transition-transform duration-200" />
              </Button>
            </motion.div>
          </motion.div>
        </div>
      </section>
    </div>
  );
} 